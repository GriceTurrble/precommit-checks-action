name: "Pre-commit checks"
description: "Runs pre-commit checks"
author: "Galen Rice"
inputs:
  token:
    description: "The token that the action will use to create and update the pull request."
    default: ${{ github.token }}
  python_version:
    description: "Version of Python to use when installing pre-commit"
    default: "3.13"
  pre_commit_version:
    description: "Version of pre-commit to install"
    default: "4.3.0"
  suggest_fixes:
    description: "Whether to create a PR review suggesting fixes if pre-commit checks fail"
    default: "false"

runs:
  using: "composite"
  steps:
    - name: "Setup Python"
      uses: actions/setup-python@v6
      with:
        python-version: ${{ inputs.python_version }}

    - name: "Install pre-commit"
      shell: bash
      run: |
        python -m pip install pre-commit==${{ inputs.pre_commit_version }}

        # Debug: show packages we installed
        PACKAGES=$(python -m pip freeze --local)
        echo "::debug::Packages installed:"
        echo "::debug::${PACKAGES}"

    - uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: python-${{ inputs.python_version }}|pre-commit-${{ inputs.pre_commit_version }}|${{ hashFiles('.pre-commit-config.yaml') }}

    - name: "Run pre-commit checks"
      id: checks
      shell: bash
      run: pre-commit run --show-diff-on-failure --all-files --color=always
      continue-on-error: true

    - name: "Create PR review suggestions with reviewdog"
      if: ${{ github.event.pull_request && inputs.suggest_fixes == 'true' }}
      uses: reviewdog/action-suggester@v1
      with:
        github_token: ${{ inputs.token }}
        tool_name: "pre_commit_checks"
        fail_level: "any"

    - name: "Fail due to lint errors without autofix"
      if: ${{ steps.checks.outcome == 'failure' }}
      shell: bash
      run: |
        echo "Linters reported errors that must be addressed first."
        exit 1

branding:
  icon: "check-circle"
  color: "orange"
